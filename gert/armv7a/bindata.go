// Code generated by go-bindata.
// sources:
// bindata.gob
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGob = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xd5\x4d\x48\x54\x5d\x18\x07\xf0\x7b\xee\x9d\xfb\x39\xe3\x07\x22\xb3\x78\x79\x91\x41\x24\x44\x22\xc2\x45\xb8\x90\x16\x1a\x21\x11\x21\x21\x61\x22\x62\xd6\xc2\xa2\x1c\x11\x91\x10\x89\x9a\x5c\x84\x84\xc8\x2c\x24\x5a\x44\xb4\x08\x89\x90\x10\x91\x56\x12\x21\x21\xe2\xc2\x85\x48\x88\x84\x0b\xa9\x88\x16\xe1\x42\x22\xe2\x4e\xff\xe7\x3c\x77\xee\x19\xef\x71\x71\x87\xdf\xbd\xe7\xfb\x39\xcf\x39\x53\x55\x7a\x6c\x0a\xb3\x34\x6d\x88\x52\xc1\x30\xce\x96\x1e\x59\x42\x64\x3a\xf3\xf7\x46\x6f\xdc\x1c\xef\xce\xdf\x1e\x19\xa7\xef\x02\x1f\x7b\x85\x63\x08\x71\x9d\x7e\xed\xce\xfc\xdd\xfc\x18\x64\x18\xa1\xfb\x0d\x6d\x4b\x1f\x44\xe8\x0e\x89\x30\x33\x6c\x94\x21\x52\xa0\xb3\x01\x36\x6a\x2c\x8a\x30\x3d\xa5\xf1\x50\x84\xc1\x72\x92\xee\x1d\x70\x46\xe3\x57\x70\x91\xb9\x86\x1e\x6a\x35\x8e\xa0\xc2\x6f\x8d\x1e\x2a\x4c\x6a\x1c\x05\x43\x8d\xdb\xe0\x2e\xf3\x07\xa6\xde\xa6\x51\x2d\xb3\x82\xfe\x01\x9a\xed\xc5\xe0\x6f\x1d\xaa\x58\xd1\x5b\x06\xb3\xcc\xbf\xa8\xbb\x93\xa4\xdf\x85\x0a\x81\xc6\xfb\xa8\xb0\xaf\xf1\x22\xc8\x11\xf3\x9b\xc1\x85\x24\x3d\xec\x50\x3a\x9b\xa4\xdf\x87\xd8\xcc\x6a\xdc\x8d\xc3\xef\xaf\xa8\xba\x2b\xc7\x9b\x1d\x6a\xa4\xd1\xea\x35\xf6\x80\xed\xcc\x71\xb0\x4b\x63\x45\xa0\x14\xd3\x0d\x58\xb1\x09\x04\x21\x30\x40\x78\x1a\x21\xdd\x8a\x97\x79\x42\x31\x02\x76\x24\x2a\xfa\x54\xc6\xeb\xa8\x79\xdc\x8f\xc2\x2c\x9e\x15\x42\x01\xcf\x5c\x0c\x1e\x16\x3b\x99\x6e\xd4\x78\x41\x0e\x26\xd9\x46\xad\x99\xb3\x27\xb1\xaa\x3e\x9a\x02\x41\xce\xae\xaa\x50\x81\xb8\xe8\x38\xaa\x8b\x15\x90\x95\x6b\xcc\x0a\x64\xa8\xe7\x9a\xe7\x95\x18\x2c\xb7\x1a\x4c\x36\xe7\x9e\x5b\x28\x97\x08\x57\x45\x68\xbf\xa7\x20\xa1\xc8\x3e\x22\x2c\x88\xd0\x6a\xa2\x59\x07\xc0\xa6\x21\x97\x19\xda\x93\x14\x63\xe4\xbf\xdd\x4f\x98\x42\xd1\x36\xe1\x01\xb0\x45\xd8\x01\xde\x10\xd6\x45\x68\xce\xc4\x88\xf3\xd3\x6c\x4a\xd2\xbb\x0c\x9e\x67\x22\xef\x2d\x4e\x08\x6f\x0e\xfc\x8f\xb9\x88\xe1\xf8\x8c\x79\x0b\x27\xd1\x3d\x02\x3f\x33\x7f\xc5\xf4\xaa\xd1\x43\x07\xdf\x14\xd4\x6f\x8e\x79\x4e\x84\xa9\x3e\x49\x7b\x13\xec\x66\x2e\x61\x0e\x3d\x92\xd6\x3e\xc8\x67\xcf\xc2\xe1\x4e\x9d\x92\x4c\x5d\xc1\x53\xc7\xc4\xd4\x9d\x36\x45\x9e\xba\x35\x0f\x56\x33\x5f\xa1\x64\x48\xd2\xdc\x03\xa7\x99\x38\x2e\xf6\x1a\xf3\x34\xc8\x79\x60\x8e\x61\xa2\x47\xdc\x6c\x10\xc1\x6a\x24\x8c\x45\x9b\x62\x76\x50\x21\xa1\x1d\x58\x2f\x17\xd1\x5e\x58\x33\x74\xd3\x11\x90\xef\xee\x70\x0c\x9e\x16\x56\xe3\xb6\x24\x69\x53\x78\xce\xf0\xd7\x9f\x78\x1d\xe0\x78\x20\xce\x76\x4a\xf1\x16\xf3\x21\xc6\x29\x30\x11\x51\x8f\x97\xe0\x4e\xe2\xf5\x05\x07\x77\x5a\xde\xca\x92\x38\x44\x0e\xf7\xe0\xe3\xb2\xb2\xf9\x12\xf5\x57\x51\x7f\x3f\xc9\xa0\x16\xfc\xa2\x71\x48\x55\xb8\x84\xce\x9e\x49\x66\xba\x41\x1e\x38\xd3\xab\x98\x93\xb7\x9f\x3c\x43\xfd\xe0\x16\xf3\x1a\xf8\x87\x0f\xd9\x77\x8c\xd8\xca\x75\x9b\xd0\x6c\x89\xfb\x45\x82\x3a\x1f\x99\x45\x35\xb0\x62\x1a\xe1\xf3\xfe\x67\x22\x0e\x5e\x83\x62\x4e\xe3\x4b\xf0\x9d\x22\x6f\x65\x30\x01\x6e\x33\x87\x65\xfa\x25\x99\x05\x83\x24\xfd\xb5\xb8\x82\xbf\x21\x6f\x4a\x19\xea\xba\xe3\xec\xd1\x88\xe4\xf5\x26\x92\xf4\x71\xc3\xb8\x07\xcc\x27\x58\x71\x33\xef\xd0\x16\xc8\x21\xf1\xde\x82\xab\xdc\x0c\x53\x77\xd6\x99\xd9\x78\x41\x4e\x41\x11\x31\x0b\xa2\xd4\xc0\xce\x07\x0e\xa7\x29\xfd\xbf\xe6\x54\xc6\x26\xf8\x2f\x00\x00\xff\xff\xea\x90\x81\x79\x29\x08\x00\x00")

func bindataGobBytes() ([]byte, error) {
	return bindataRead(
		_bindataGob,
		"bindata.gob",
	)
}

func bindataGob() (*asset, error) {
	bytes, err := bindataGobBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.gob", size: 2089, mode: os.FileMode(493), modTime: time.Unix(1492885757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.gob": bindataGob,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.gob": &bintree{bindataGob, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

